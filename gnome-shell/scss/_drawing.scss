// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c: $borders_edge) {
  // outer highlight "used" on most widgets
  @return 0 1px $c;
}

// provide font size in rem, with px fallback
@mixin fontsize($size: 24, $base: 16) {
  font-size: round($size) + pt;

  //font-size: ($size / $base) * 1rem;
}

@mixin _shadows($shadow1, $shadow2: none, $shadow3: none, $shadow4: none) {
  // Helper function to stack up to 4 box-shadows;

  @if $shadow4 != none {
    box-shadow: $shadow1, $shadow2, $shadow3, $shadow4;
  }
  @else if $shadow3 != none {
    box-shadow: $shadow1, $shadow2, $shadow3;
  }
  @else if $shadow2 != none {
    box-shadow: $shadow1, $shadow2;
  }
  @else {
    box-shadow: $shadow1;
  }
}

// entries

@mixin entry($t, $fc: $selected_bg_color, $edge: $borders_edge) {
  // Entries drawing function
  // $t: entry type
  // $fc: focus color
  // $edge: set to none to not draw the bottom edge or specify a color to not use the default one
  // possible $t values:
  // normal, focus, insensitive

  @if $t == normal {
    background-color: $base_color;
    border-color: lighten($borders_color, 5%);
  }

  @if $t == focus {
    box-shadow: none;
    border-color: $selected_bg_color;
  }

  @if $t == hover {}

  @if $t == insensitive {
    color: if($variant == "light", darken($insensitive_fg_color, 10), $insensitive_fg_color);
    border-color: $insensitive_bg_color;
    box-shadow: none;
  }
}

// buttons

@function _border_color($c) {
  @return darken($c, 25%);
}

// colored buttons want
// the border form the
// base color

@function _text_shadow_color($tc: $fg_color, $bg: $bg_color) {
  //
  // calculate the color of text shadows
  //
  // $tc is the text color
  // $bg is the background color
  //
  $_lbg: lightness($bg) / 100%;

  @if lightness($tc) < 50% {
    @return transparentize(white, 1 - $_lbg / ($_lbg * 1.3));
  }
  @else {
    @return transparentize(black, $_lbg * 0.8);
  }
}

@function _button_hilight_color($c) {
  //
  // calculate the right top hilight color for buttons
  //
  // $c: base color;
  //
  @if lightness($c) > 90% {
    @return white;
  }
  @else if lightness($c) > 80% {
    @return transparentize(white, 0.3);
  }
  @else if lightness($c) > 50% {
    @return transparentize(white, 0.5);
  }
  @else if lightness($c) > 40% {
    @return transparentize(white, 0.7);
  }
  @else {
    @return transparentize(white, 0.9);
  }
}

@mixin _button_text_shadow($tc: $fg_color, $bg: $bg_color) {
  // helper function for the text emboss effect
  // $tc is the optional text color, not the shadow color

  $_shadow: _text_shadow_color($tc, $bg);

  @if variant == "dark" {
    @if lightness($tc) < 50% {
      text-shadow: 0 1px $_shadow;
      icon-shadow: 0 1px $_shadow;
    }
    @else {
      text-shadow: 0 0px $_shadow;
      icon-shadow: 0 0px $_shadow;
    }
  }
}

@mixin button_styling {
  color: $fg_color;
  background-color: transparent;
  box-shadow: none;
  border-width: 0px;
}

@mixin button($t, $c: $osd_bg_color, $tc: $fg_color, $edge: $borders_edge) {
  // Button drawing function
  // $t:    button type,
  // $c:    base button color for colored* types
  // $tc:   optional text color for colored* types
  // $edge: set to none to not draw the bottom edge or specify a color to not use the default one
  // possible $t values:
  // normal, hover, active, insensitive, insensitive-active,
  // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
  // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated

  $_hilight_color: _button_hilight_color($c);

  border-image: url("#{$resource_path}/buttons/button-#{$t}.png");
  border-radius: 0 0 3px 3px;

  @if $t == normal { // normal button
    @include button_styling;
    @include _button_text_shadow($tc, $c);
  }

  @if $t == focus { // focused button
    @include button_styling;
  }

  @else if $t == hover { // active osd button
    @include button_styling;
  }

  @else if $t == active {
    // active osd button
    @include button_styling;
  }

  @else if $t == insensitive {
    // insensitive osd button
    @include button_styling;
    color: if($variant == "light", darken($insensitive_fg_color, 10), $insensitive_fg_color);
  }

  @else if $t == undecorated {
    // reset
    border-color: transparent;
    background-color: transparent;
    background-image: none;
    text-shadow: none;
    icon-shadow: none;
  }
}
