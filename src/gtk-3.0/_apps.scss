// Rhythmbox
.primary-toolbar {
  border-image-source: image(if($darker == true, $dark_border_color, $border_color));
  border-image-width: 1px;
  border-image-slice: 0 0 1 0;

  @if $darker == true {
    button {
      @if $darker == true {
        @each $a_type, $b_type in ("", "normal"), (":hover", "hover"), (":active, &:checked", "active"), (":backdrop", "backdrop") {
          &.flat &#{$a_type}, &#{$a_type} {
            @include button($b_type, $dark_base_color, $light_fg_color);
          }
        }
      }
    }

    scale trough {
      background-color: $dark_dark_fill;
      box-shadow: inset 0 0 0 1px $dark_border_color;
    }

    scale slider {
      border: 1px solid darken($dark_alt_border_color, 3%);

      @include button(normal, $dark_base_color, $edge: $shadow_color);

      &:hover {
        @include button(hover, $dark_base_color, $edge: $dark_border_color);
      }

      &:active {
        @include button(active, $dark_base_color);
      }

      &:disabled {
        @include button(insensitive, $dark_base_color);
      }

      &:backdrop {
        @include button(backdrop, $dark_base_color);

        transition: $backdrop_transition;

        &:disabled {
          @include button(backdrop-insensitive, $dark_base_color);
        }
      }
    }
  }
}

// Tweak Tool
list.tweak-categories {
  background-image: image($sidebar_bg_color);
  border-image: image($sidebar_bg_color);
  border-right-style: none;
  border-right-width: 0px;

  separator {
    min-height: 0px;
    background: transparent;
  }
}

#AutostartListBoxTweakGroup .tweak-startup {
  padding: 8px 6px;
  background-image: image($bg_color);

  &:hover {
    background-image: image($hover);
  }

  &:active {
    background-image: image($active);
  }
}

#ShellExtensionTweakGroup button {
  // style the suggested actions them as destructive buttons
  &.text-button {
    &.suggested-action {
      @include button(normal, $destructive_color, white);

      &:hover {
        @include button(hover, $destructive_color, white);
      }

      &:active {
        @include button(active, $destructive_color, white);
      }

      &:disabled {
        @include button(disabled, $destructive_color);
      }
    }
  }
}

// Nautilus
.nautilus-window {
  headerbar > revealer button.button.popup.toggle {
    color: $progress_color;

    &:checked {
      color: darken($progress_color, 10%);
    }
  }

  .floating-bar {
    background: transparentize($base_color, 0.15);
  }
}

// Evolution
#main-toolbar {
  // get rid of the huge icons
  -gtk-icon-style: symbolic;
}

// Builder

window.workbench {
  docktabstrip {
    // analogous to notebook header
    docktab {
      // analogous to notebook tabs
      @extend %tab;

      box-shadow: _shadow_border(0, 0, 1, 1, $thicker: true);

      &:hover, &:checked {
        box-shadow: _shadow_border(0, 0, 0, 1, $thicker: true);
      }
    }
  }

  layouttabbar {
    box-shadow: _shadow_border(0, 0, 1, 1);

    layouttab button {
      &, &:backdrop {
        @include button(undecorated);
        @include colored_focus;
      }
    }
  }

  popover {
    list row {
      label {
        padding: 0 5px;
      }
    }

    button.model {
      transition: $button_transition;
      min-height: $normal_size + 4;
      padding-left: $normal_padding + 1;
      padding-right: $normal_padding + 1;
      border-radius: 0px;
      outline-offset: -2px;
    }
  }

  box.popover-action-area .text-button {
    greeter frame, layout > stack {
      border: 1px solid $border_color;
    }
  }
}

// Software

.installed-overlay-box {
  background-image: image($success_color);
}

button.tile.view:active {
  label, image {
    color: $fg_color;
  }
}

headerbar button.toolbar-primary-buttons-software {
  @each $a_type, $b_type in ("", "normal"), (":hover", "hover"), (":active, &:checked", "active"), (":backdrop", "backdrop") {
    &#{$a_type} {
      @if $darker == true {
        @include button($b_type, $dark_base_color, $light_fg_color);
      }
      @else {
        @include button($b_type);
      }
    }
  }
}
