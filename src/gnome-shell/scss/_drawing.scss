// Drawing mixins

// generic drawing of more complex things

@function _widget_edge($c: $borders_edge) {
  // outer highlight "used" on most widgets
  @return 0 1px $c;
}

// provide font size in rem, with px fallback
@mixin fontsize($size: 24, $base: 16) {
  font-size: round($size) + pt;

  //font-size: ($size / $base) * 1rem;
}

@mixin _shadows($shadow1, $shadow2: none, $shadow3: none, $shadow4: none) {
  // Helper function to stack up to 4 box-shadows;

  @if $shadow4 != none {
    box-shadow: $shadow1, $shadow2, $shadow3, $shadow4;
  }
  @else if $shadow3 != none {
    box-shadow: $shadow1, $shadow2, $shadow3;
  }
  @else if $shadow2 != none {
    box-shadow: $shadow1, $shadow2;
  }
  @else {
    box-shadow: $shadow1;
  }
}

@mixin reset {
  color: $fg_color;
  box-shadow: none;
  border-width: 0px;
  border-color: transparent;
  background-color: transparent;
  background-image: none;
  text-shadow: none;
  icon-shadow: none;
}

// entries

@mixin entry($fg: $fg_color, $bg: $base_color) {
  color: $fg;
  background-color: $bg;
  box-shadow: inset 0 0 0 0px black;
  border-radius: $standard_radius;
  border: 1px solid if($bg == $dark_base_color, $dark_border_color, $border_color);

  &:hover, &:focus {
    box-shadow: inset 0 0 0 1px $primary_color;
    border: 1px solid $primary_color;
  }

  &:insensitive {
    color: if($variant == "light", darken($insensitive_fg_color, 10), $insensitive_fg_color);
    box-shadow: inset 0 0 0 0px $border_color;
    border: 1px solid $border_color;
  }
}

// buttons

@function _border_color($c, $alt: false) {
  @if $alt == false {
    @return darken($c, 25%);
  }
  @else {
    @return darken($c, 10%);
  }
}

// colored buttons want
// the border form the
// base color

@function _text_shadow_color($tc: $fg_color, $bg: $bg_color) {
  //
  // calculate the color of text shadows
  //
  // $tc is the text color
  // $bg is the background color
  //
  $_lbg: lightness($bg) / 100%;

  @if lightness($tc) < 50% {
    @return transparentize(white, 1 - $_lbg / ($_lbg * 1.3));
  }
  @else {
    @return transparentize(black, $_lbg * 0.8);
  }
}

@function _button_hilight_color($c) {
  //
  // calculate the right top hilight color for buttons
  //
  // $c: base color;
  //
  @if lightness($c) > 90% {
    @return white;
  }
  @else if lightness($c) > 80% {
    @return transparentize(white, 0.3);
  }
  @else if lightness($c) > 50% {
    @return transparentize(white, 0.5);
  }
  @else if lightness($c) > 40% {
    @return transparentize(white, 0.7);
  }
  @else {
    @return transparentize(white, 0.9);
  }
}

@mixin _button_text_shadow($tc: $fg_color, $bg: $bg_color) {
  // helper function for the text emboss effect
  // $tc is the optional text color, not the shadow color

  $_shadow: _text_shadow_color($tc, $bg);

  @if variant == "dark" {
    @if lightness($tc) < 50% {
      text-shadow: 0 1px $_shadow;
      icon-shadow: 0 1px $_shadow;
    }
    @else {
      text-shadow: 0 0px $_shadow;
      icon-shadow: 0 0px $_shadow;
    }
  }
}

@mixin button($t, $c: $bg_color, $tc: $fg_color, $edge: none) {
  //
  // Button drawing function
  //
  // $t:    button type,
  // $c:    base button color for colored* types
  // $tc:   optional text color for colored* types
  // $edge: set to none to not draw the bottom edge or specify a color to not
  //        use the default one
  //
  // possible $t values:
  // normal, hover, active, insensitive, insensitive-active,
  // backdrop, backdrop-active, backdrop-insensitive, backdrop-insensitive-active,
  // osd, osd-hover, osd-active, osd-insensitive, osd-backdrop, undecorated
  //

  $_hilight_color: _button_hilight_color($c);
  $_button_edge: if($edge == none, none, _widget_edge($edge));
  $_blank_edge: if($edge == none, none, _widget_edge(transparentize($edge, 1)));

  border-top: 1px solid if($c != $bg_color, _border_color($c), $border_color);

  @if $t == normal {
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $border_color);
    border-bottom-color: if($c != $bg_color, _border_color($c), $alt_border_color);
    background-color: $c;

    @include _button_text_shadow($tc, $c);

    @include _shadows(inset 0 1px $_hilight_color, $_button_edge);
  }
  @else if $t == hover {
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $border_color);
    border-bottom-color: if($c != $bg_color, _border_color($c), $alt_border_color);
    background-color: lighten($c, 5%);

    @if $variant == "light" {
      @include _button_text_shadow($tc, lighten($c, 5%));

      @include _shadows(inset 0 1px _button_hilight_color(lighten($c, 5%)), $_button_edge);
    }
    @else {
      @include _button_text_shadow($tc, lighten($c, 5%));

      @include _shadows(inset 0 1px _button_hilight_color(darken($c, 2%)), $_button_edge);
    }
  }
  @else if $t == active {
    color: $tc;
    border-color: if($c != $bg_color, _border_color($c), $border_color);
    background-color: darken($c, 6%);

    @include _shadows(inset 0 1px transparentize($_hilight_color, 1), $_button_edge);

    text-shadow: none;
  }
  @else if $t == insensitive {
    border-color: $border_color;
    color: $insensitive_fg_color;
    background-color: $insensitive_bg_color;
    box-shadow: none;
    text-shadow: none;
    icon-shadow: none;
  }
  @else if $t == undecorated {
    border-color: transparent;
    background-color: transparent;
    background-image: none;

    @include _shadows(inset 0 1px transparentize(white, 1), $_blank_edge);

    text-shadow: none;
    icon-shadow: none;
  }
}
